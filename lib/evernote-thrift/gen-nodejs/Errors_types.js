//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.EDAMErrorCode = {
'UNKNOWN' : 1,
'BAD_DATA_FORMAT' : 2,
'PERMISSION_DENIED' : 3,
'INTERNAL_ERROR' : 4,
'DATA_REQUIRED' : 5,
'LIMIT_REACHED' : 6,
'QUOTA_REACHED' : 7,
'INVALID_AUTH' : 8,
'AUTH_EXPIRED' : 9,
'DATA_CONFLICT' : 10,
'ENML_VALIDATION' : 11,
'SHARD_UNAVAILABLE' : 12,
'LEN_TOO_SHORT' : 13,
'LEN_TOO_LONG' : 14,
'TOO_FEW' : 15,
'TOO_MANY' : 16,
'UNSUPPORTED_OPERATION' : 17
};
EDAMUserException = module.exports.EDAMUserException = function(args) {
  Thrift.TException.call(this, "EDAMUserException")
  this.name = "EDAMUserException"
  this.errorCode = null;
  this.parameter = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
  }
};
Thrift.inherits(EDAMUserException, Thrift.TException);
EDAMUserException.prototype.name = 'EDAMUserException';
EDAMUserException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMUserException.prototype.write = function(output) {
  output.writeStructBegin('EDAMUserException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRING, 2);
    output.writeString(this.parameter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EDAMSystemException = module.exports.EDAMSystemException = function(args) {
  Thrift.TException.call(this, "EDAMSystemException")
  this.name = "EDAMSystemException"
  this.errorCode = null;
  this.message = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(EDAMSystemException, Thrift.TException);
EDAMSystemException.prototype.name = 'EDAMSystemException';
EDAMSystemException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMSystemException.prototype.write = function(output) {
  output.writeStructBegin('EDAMSystemException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EDAMNotFoundException = module.exports.EDAMNotFoundException = function(args) {
  Thrift.TException.call(this, "EDAMNotFoundException")
  this.name = "EDAMNotFoundException"
  this.identifier = null;
  this.key = null;
  if (args) {
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
Thrift.inherits(EDAMNotFoundException, Thrift.TException);
EDAMNotFoundException.prototype.name = 'EDAMNotFoundException';
EDAMNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('EDAMNotFoundException');
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 1);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

