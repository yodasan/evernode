//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Types_ttypes = require('./Types_types')
var ttypes = module.exports = {};
SyncState = module.exports.SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.fullSyncBefore !== undefined) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunk = module.exports.SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.chunkHighUSN !== undefined) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.searches !== undefined) {
      this.searches = args.searches;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.expungedNotes !== undefined) {
      this.expungedNotes = args.expungedNotes;
    }
    if (args.expungedNotebooks !== undefined) {
      this.expungedNotebooks = args.expungedNotebooks;
    }
    if (args.expungedTags !== undefined) {
      this.expungedTags = args.expungedTags;
    }
    if (args.expungedSearches !== undefined) {
      this.expungedSearches = args.expungedSearches;
    }
    if (args.linkedNotebooks !== undefined) {
      this.linkedNotebooks = args.linkedNotebooks;
    }
    if (args.expungedLinkedNotebooks !== undefined) {
      this.expungedLinkedNotebooks = args.expungedLinkedNotebooks;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.notes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Types_ttypes.Note();
          elem6.read(input);
          this.notes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.notebooks = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new Types_ttypes.Notebook();
          elem13.read(input);
          this.notebooks.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.tags = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new Types_ttypes.Tag();
          elem20.read(input);
          this.tags.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.searches = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new Types_ttypes.SavedSearch();
          elem27.read(input);
          this.searches.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.resources = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new Types_ttypes.Resource();
          elem34.read(input);
          this.resources.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.expungedNotes = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readString();
          this.expungedNotes.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.expungedNotebooks = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.expungedNotebooks.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.expungedTags = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readString();
          this.expungedTags.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.expungedSearches = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.expungedSearches.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.linkedNotebooks = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new Types_ttypes.LinkedNotebook();
          elem69.read(input);
          this.linkedNotebooks.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.expungedLinkedNotebooks = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString();
          this.expungedLinkedNotebooks.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN !== null && this.chunkHighUSN !== undefined) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter77 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter77))
      {
        iter77 = this.notes[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter78 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter78))
      {
        iter78 = this.notebooks[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter79 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter79))
      {
        iter79 = this.tags[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches !== null && this.searches !== undefined) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter80 in this.searches)
    {
      if (this.searches.hasOwnProperty(iter80))
      {
        iter80 = this.searches[iter80];
        iter80.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter81 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter81))
      {
        iter81 = this.resources[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes !== null && this.expungedNotes !== undefined) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter82 in this.expungedNotes)
    {
      if (this.expungedNotes.hasOwnProperty(iter82))
      {
        iter82 = this.expungedNotes[iter82];
        output.writeString(iter82);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks !== null && this.expungedNotebooks !== undefined) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter83 in this.expungedNotebooks)
    {
      if (this.expungedNotebooks.hasOwnProperty(iter83))
      {
        iter83 = this.expungedNotebooks[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags !== null && this.expungedTags !== undefined) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter84 in this.expungedTags)
    {
      if (this.expungedTags.hasOwnProperty(iter84))
      {
        iter84 = this.expungedTags[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches !== null && this.expungedSearches !== undefined) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter85 in this.expungedSearches)
    {
      if (this.expungedSearches.hasOwnProperty(iter85))
      {
        iter85 = this.expungedSearches[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks !== null && this.linkedNotebooks !== undefined) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter86 in this.linkedNotebooks)
    {
      if (this.linkedNotebooks.hasOwnProperty(iter86))
      {
        iter86 = this.linkedNotebooks[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks !== null && this.expungedLinkedNotebooks !== undefined) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter87 in this.expungedLinkedNotebooks)
    {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter87))
      {
        iter87 = this.expungedLinkedNotebooks[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunkFilter = module.exports.SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.requireNoteContentClass = null;
  if (args) {
    if (args.includeNotes !== undefined) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.requireNoteContentClass !== undefined) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype.write = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes !== null && this.includeNotes !== undefined) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources !== null && this.includeNoteResources !== undefined) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes !== null && this.includeNoteAttributes !== undefined) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags !== null && this.includeTags !== undefined) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches !== null && this.includeSearches !== undefined) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources !== null && this.includeResources !== undefined) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks !== null && this.includeLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged !== null && this.includeExpunged !== undefined) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap !== null && this.includeNoteApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap !== null && this.includeResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap !== null && this.includeNoteResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass !== null && this.requireNoteContentClass !== undefined) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteFilter = module.exports.NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  this.emphasized = null;
  if (args) {
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined) {
      this.inactive = args.inactive;
    }
    if (args.emphasized !== undefined) {
      this.emphasized = args.emphasized;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.tagGuids = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.tagGuids.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.emphasized = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype.write = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter95 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter95))
      {
        iter95 = this.tagGuids[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive !== null && this.inactive !== undefined) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  if (this.emphasized !== null && this.emphasized !== undefined) {
    output.writeFieldBegin('emphasized', Thrift.Type.STRING, 8);
    output.writeString(this.emphasized);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteList = module.exports.NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.notes = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new Types_ttypes.Note();
          elem102.read(input);
          this.notes.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.stoppedWords = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = input.readString();
          this.stoppedWords.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.searchedWords = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = input.readString();
          this.searchedWords.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype.write = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter117 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter117))
      {
        iter117 = this.notes[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter118 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter118))
      {
        iter118 = this.stoppedWords[iter118];
        output.writeString(iter118);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter119 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter119))
      {
        iter119 = this.searchedWords[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMetadata = module.exports.NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.largestResourceMime !== undefined) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.tagGuids = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readString();
          this.tagGuids.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new Types_ttypes.NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype.write = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter127 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter127))
      {
        iter127 = this.tagGuids[iter127];
        output.writeString(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime !== null && this.largestResourceMime !== undefined) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize !== null && this.largestResourceSize !== undefined) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataList = module.exports.NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.notes = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.NoteMetadata();
          elem134.read(input);
          this.notes.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.stoppedWords = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = input.readString();
          this.stoppedWords.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.searchedWords = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = input.readString();
          this.searchedWords.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter149 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter149))
      {
        iter149 = this.notes[iter149];
        iter149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter150 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter150))
      {
        iter150 = this.stoppedWords[iter150];
        output.writeString(iter150);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter151 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter151))
      {
        iter151 = this.searchedWords[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataResultSpec = module.exports.NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeUpdateSequenceNum !== undefined) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle !== null && this.includeTitle !== undefined) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength !== null && this.includeContentLength !== undefined) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated !== null && this.includeCreated !== undefined) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated !== null && this.includeUpdated !== undefined) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum !== null && this.includeUpdateSequenceNum !== undefined) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid !== null && this.includeNotebookGuid !== undefined) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids !== null && this.includeTagGuids !== undefined) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime !== null && this.includeLargestResourceMime !== undefined) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize !== null && this.includeLargestResourceSize !== undefined) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteCollectionCounts = module.exports.NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined) {
      this.notebookCounts = args.notebookCounts;
    }
    if (args.tagCounts !== undefined) {
      this.tagCounts = args.tagCounts;
    }
    if (args.trashCount !== undefined) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size152 = 0;
        var _rtmp3156;
        this.notebookCounts = {};
        var _ktype153 = 0;
        var _vtype154 = 0;
        _rtmp3156 = input.readMapBegin();
        _ktype153 = _rtmp3156.ktype;
        _vtype154 = _rtmp3156.vtype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var key158 = null;
          var val159 = null;
          key158 = input.readString();
          val159 = input.readI32();
          this.notebookCounts[key158] = val159;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size160 = 0;
        var _rtmp3164;
        this.tagCounts = {};
        var _ktype161 = 0;
        var _vtype162 = 0;
        _rtmp3164 = input.readMapBegin();
        _ktype161 = _rtmp3164.ktype;
        _vtype162 = _rtmp3164.vtype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var key166 = null;
          var val167 = null;
          key166 = input.readString();
          val167 = input.readI32();
          this.tagCounts[key166] = val167;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype.write = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts !== null && this.notebookCounts !== undefined) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter168 in this.notebookCounts)
    {
      if (this.notebookCounts.hasOwnProperty(kiter168))
      {
        var viter169 = this.notebookCounts[kiter168];
        output.writeString(kiter168);
        output.writeI32(viter169);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts !== null && this.tagCounts !== undefined) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter170 in this.tagCounts)
    {
      if (this.tagCounts.hasOwnProperty(kiter170))
      {
        var viter171 = this.tagCounts[kiter170];
        output.writeString(kiter170);
        output.writeI32(viter171);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount !== null && this.trashCount !== undefined) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteEmailParameters = module.exports.NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.toAddresses !== undefined) {
      this.toAddresses = args.toAddresses;
    }
    if (args.ccAddresses !== undefined) {
      this.ccAddresses = args.ccAddresses;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.toAddresses = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = input.readString();
          this.toAddresses.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size179 = 0;
        var _rtmp3183;
        this.ccAddresses = [];
        var _etype182 = 0;
        _rtmp3183 = input.readListBegin();
        _etype182 = _rtmp3183.etype;
        _size179 = _rtmp3183.size;
        for (var _i184 = 0; _i184 < _size179; ++_i184)
        {
          var elem185 = null;
          elem185 = input.readString();
          this.ccAddresses.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype.write = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddresses !== null && this.toAddresses !== undefined) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter186 in this.toAddresses)
    {
      if (this.toAddresses.hasOwnProperty(iter186))
      {
        iter186 = this.toAddresses[iter186];
        output.writeString(iter186);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses !== null && this.ccAddresses !== undefined) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter187 in this.ccAddresses)
    {
      if (this.ccAddresses.hasOwnProperty(iter187))
      {
        iter187 = this.ccAddresses[iter187];
        output.writeString(iter187);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteVersionId = module.exports.NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.saved !== undefined) {
      this.saved = args.saved;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype.write = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved !== null && this.saved !== undefined) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientUsageMetrics = module.exports.ClientUsageMetrics = function(args) {
  this.sessions = null;
  if (args) {
    if (args.sessions !== undefined) {
      this.sessions = args.sessions;
    }
  }
};
ClientUsageMetrics.prototype = {};
ClientUsageMetrics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sessions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientUsageMetrics.prototype.write = function(output) {
  output.writeStructBegin('ClientUsageMetrics');
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.I32, 1);
    output.writeI32(this.sessions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedQuery = module.exports.RelatedQuery = function(args) {
  this.noteGuid = null;
  this.plainText = null;
  this.filter = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.plainText !== undefined) {
      this.plainText = args.plainText;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
RelatedQuery.prototype = {};
RelatedQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plainText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedQuery.prototype.write = function(output) {
  output.writeStructBegin('RelatedQuery');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.plainText !== null && this.plainText !== undefined) {
    output.writeFieldBegin('plainText', Thrift.Type.STRING, 2);
    output.writeString(this.plainText);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResult = module.exports.RelatedResult = function(args) {
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.containingNotebooks = null;
  this.debugInfo = null;
  if (args) {
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.containingNotebooks !== undefined) {
      this.containingNotebooks = args.containingNotebooks;
    }
    if (args.debugInfo !== undefined) {
      this.debugInfo = args.debugInfo;
    }
  }
};
RelatedResult.prototype = {};
RelatedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.notes = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new Types_ttypes.Note();
          elem194.read(input);
          this.notes.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size195 = 0;
        var _rtmp3199;
        this.notebooks = [];
        var _etype198 = 0;
        _rtmp3199 = input.readListBegin();
        _etype198 = _rtmp3199.etype;
        _size195 = _rtmp3199.size;
        for (var _i200 = 0; _i200 < _size195; ++_i200)
        {
          var elem201 = null;
          elem201 = new Types_ttypes.Notebook();
          elem201.read(input);
          this.notebooks.push(elem201);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.tags = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = new Types_ttypes.Tag();
          elem208.read(input);
          this.tags.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size209 = 0;
        var _rtmp3213;
        this.containingNotebooks = [];
        var _etype212 = 0;
        _rtmp3213 = input.readListBegin();
        _etype212 = _rtmp3213.etype;
        _size209 = _rtmp3213.size;
        for (var _i214 = 0; _i214 < _size209; ++_i214)
        {
          var elem215 = null;
          elem215 = new Types_ttypes.NotebookDescriptor();
          elem215.read(input);
          this.containingNotebooks.push(elem215);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResult.prototype.write = function(output) {
  output.writeStructBegin('RelatedResult');
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter216 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter216))
      {
        iter216 = this.notes[iter216];
        iter216.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter217 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter217))
      {
        iter217 = this.notebooks[iter217];
        iter217.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter218 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter218))
      {
        iter218 = this.tags[iter218];
        iter218.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containingNotebooks !== null && this.containingNotebooks !== undefined) {
    output.writeFieldBegin('containingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.containingNotebooks.length);
    for (var iter219 in this.containingNotebooks)
    {
      if (this.containingNotebooks.hasOwnProperty(iter219))
      {
        iter219 = this.containingNotebooks[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 5);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResultSpec = module.exports.RelatedResultSpec = function(args) {
  this.maxNotes = null;
  this.maxNotebooks = null;
  this.maxTags = null;
  this.writableNotebooksOnly = null;
  this.includeContainingNotebooks = null;
  this.includeDebugInfo = null;
  if (args) {
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
    if (args.maxNotebooks !== undefined) {
      this.maxNotebooks = args.maxNotebooks;
    }
    if (args.maxTags !== undefined) {
      this.maxTags = args.maxTags;
    }
    if (args.writableNotebooksOnly !== undefined) {
      this.writableNotebooksOnly = args.writableNotebooksOnly;
    }
    if (args.includeContainingNotebooks !== undefined) {
      this.includeContainingNotebooks = args.includeContainingNotebooks;
    }
    if (args.includeDebugInfo !== undefined) {
      this.includeDebugInfo = args.includeDebugInfo;
    }
  }
};
RelatedResultSpec.prototype = {};
RelatedResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxNotebooks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.writableNotebooksOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContainingNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDebugInfo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResultSpec.prototype.write = function(output) {
  output.writeStructBegin('RelatedResultSpec');
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 1);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.maxNotebooks !== null && this.maxNotebooks !== undefined) {
    output.writeFieldBegin('maxNotebooks', Thrift.Type.I32, 2);
    output.writeI32(this.maxNotebooks);
    output.writeFieldEnd();
  }
  if (this.maxTags !== null && this.maxTags !== undefined) {
    output.writeFieldBegin('maxTags', Thrift.Type.I32, 3);
    output.writeI32(this.maxTags);
    output.writeFieldEnd();
  }
  if (this.writableNotebooksOnly !== null && this.writableNotebooksOnly !== undefined) {
    output.writeFieldBegin('writableNotebooksOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.writableNotebooksOnly);
    output.writeFieldEnd();
  }
  if (this.includeContainingNotebooks !== null && this.includeContainingNotebooks !== undefined) {
    output.writeFieldBegin('includeContainingNotebooks', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContainingNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeDebugInfo !== null && this.includeDebugInfo !== undefined) {
    output.writeFieldBegin('includeDebugInfo', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeDebugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

