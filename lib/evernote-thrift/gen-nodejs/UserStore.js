//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Types_ttypes = require('./Types_types')
var Errors_ttypes = require('./Errors_types')


var ttypes = require('./UserStore_types');
//HELPER FUNCTIONS AND STRUCTURES

UserStore_checkVersion_args = function(args) {
  this.clientName = null;
  this.edamVersionMajor = 1;
  this.edamVersionMinor = 23;
  if (args) {
    if (args.clientName !== undefined) {
      this.clientName = args.clientName;
    }
    if (args.edamVersionMajor !== undefined) {
      this.edamVersionMajor = args.edamVersionMajor;
    }
    if (args.edamVersionMinor !== undefined) {
      this.edamVersionMinor = args.edamVersionMinor;
    }
  }
};
UserStore_checkVersion_args.prototype = {};
UserStore_checkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.edamVersionMajor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.edamVersionMinor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_checkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_checkVersion_args');
  if (this.clientName !== null && this.clientName !== undefined) {
    output.writeFieldBegin('clientName', Thrift.Type.STRING, 1);
    output.writeString(this.clientName);
    output.writeFieldEnd();
  }
  if (this.edamVersionMajor !== null && this.edamVersionMajor !== undefined) {
    output.writeFieldBegin('edamVersionMajor', Thrift.Type.I16, 2);
    output.writeI16(this.edamVersionMajor);
    output.writeFieldEnd();
  }
  if (this.edamVersionMinor !== null && this.edamVersionMinor !== undefined) {
    output.writeFieldBegin('edamVersionMinor', Thrift.Type.I16, 3);
    output.writeI16(this.edamVersionMinor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_checkVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserStore_checkVersion_result.prototype = {};
UserStore_checkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_checkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_checkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getBootstrapInfo_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined) {
      this.locale = args.locale;
    }
  }
};
UserStore_getBootstrapInfo_args.prototype = {};
UserStore_getBootstrapInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getBootstrapInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getBootstrapInfo_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getBootstrapInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserStore_getBootstrapInfo_result.prototype = {};
UserStore_getBootstrapInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BootstrapInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getBootstrapInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getBootstrapInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticate_args = function(args) {
  this.username = null;
  this.password = null;
  this.consumerKey = null;
  this.consumerSecret = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.consumerSecret !== undefined) {
      this.consumerSecret = args.consumerSecret;
    }
  }
};
UserStore_authenticate_args.prototype = {};
UserStore_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticate_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.consumerKey !== null && this.consumerKey !== undefined) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.consumerSecret !== null && this.consumerSecret !== undefined) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4);
    output.writeString(this.consumerSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticate_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticate_result.prototype = {};
UserStore_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateLongSession_args = function(args) {
  this.username = null;
  this.password = null;
  this.consumerKey = null;
  this.consumerSecret = null;
  this.deviceIdentifier = null;
  this.deviceDescription = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.consumerSecret !== undefined) {
      this.consumerSecret = args.consumerSecret;
    }
    if (args.deviceIdentifier !== undefined) {
      this.deviceIdentifier = args.deviceIdentifier;
    }
    if (args.deviceDescription !== undefined) {
      this.deviceDescription = args.deviceDescription;
    }
  }
};
UserStore_authenticateLongSession_args.prototype = {};
UserStore_authenticateLongSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deviceIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateLongSession_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateLongSession_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.consumerKey !== null && this.consumerKey !== undefined) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.consumerSecret !== null && this.consumerSecret !== undefined) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4);
    output.writeString(this.consumerSecret);
    output.writeFieldEnd();
  }
  if (this.deviceIdentifier !== null && this.deviceIdentifier !== undefined) {
    output.writeFieldBegin('deviceIdentifier', Thrift.Type.STRING, 5);
    output.writeString(this.deviceIdentifier);
    output.writeFieldEnd();
  }
  if (this.deviceDescription !== null && this.deviceDescription !== undefined) {
    output.writeFieldBegin('deviceDescription', Thrift.Type.STRING, 6);
    output.writeString(this.deviceDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateLongSession_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticateLongSession_result.prototype = {};
UserStore_authenticateLongSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateLongSession_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateLongSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateToBusiness_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_authenticateToBusiness_args.prototype = {};
UserStore_authenticateToBusiness_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateToBusiness_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateToBusiness_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateToBusiness_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticateToBusiness_result.prototype = {};
UserStore_authenticateToBusiness_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateToBusiness_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateToBusiness_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_refreshAuthentication_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_refreshAuthentication_args.prototype = {};
UserStore_refreshAuthentication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_refreshAuthentication_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_refreshAuthentication_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_refreshAuthentication_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_refreshAuthentication_result.prototype = {};
UserStore_refreshAuthentication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_refreshAuthentication_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_refreshAuthentication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getUser_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getUser_args.prototype = {};
UserStore_getUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getUser_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getUser_result.prototype = {};
UserStore_getUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPublicUserInfo_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
UserStore_getPublicUserInfo_args.prototype = {};
UserStore_getPublicUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPublicUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPublicUserInfo_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPublicUserInfo_result = function(args) {
  this.success = null;
  this.notFoundException = null;
  this.systemException = null;
  this.userException = null;
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
  }
};
UserStore_getPublicUserInfo_result.prototype = {};
UserStore_getPublicUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PublicUserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPublicUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPublicUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 1);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 3);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPremiumInfo_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getPremiumInfo_args.prototype = {};
UserStore_getPremiumInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPremiumInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPremiumInfo_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPremiumInfo_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getPremiumInfo_result.prototype = {};
UserStore_getPremiumInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.PremiumInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPremiumInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPremiumInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getNoteStoreUrl_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getNoteStoreUrl_args.prototype = {};
UserStore_getNoteStoreUrl_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getNoteStoreUrl_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getNoteStoreUrl_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getNoteStoreUrl_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getNoteStoreUrl_result.prototype = {};
UserStore_getNoteStoreUrl_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getNoteStoreUrl_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getNoteStoreUrl_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
UserStoreClient.prototype = {};
UserStoreClient.prototype.checkVersion = function(clientName, edamVersionMajor, edamVersionMinor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_checkVersion(clientName, edamVersionMajor, edamVersionMinor);
};

UserStoreClient.prototype.send_checkVersion = function(clientName, edamVersionMajor, edamVersionMinor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_checkVersion_args();
  args.clientName = clientName;
  args.edamVersionMajor = edamVersionMajor;
  args.edamVersionMinor = edamVersionMinor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_checkVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_checkVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkVersion failed: unknown result');
};
UserStoreClient.prototype.getBootstrapInfo = function(locale, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getBootstrapInfo(locale);
};

UserStoreClient.prototype.send_getBootstrapInfo = function(locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBootstrapInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getBootstrapInfo_args();
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_getBootstrapInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_getBootstrapInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBootstrapInfo failed: unknown result');
};
UserStoreClient.prototype.authenticate = function(username, password, consumerKey, consumerSecret, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticate(username, password, consumerKey, consumerSecret);
};

UserStoreClient.prototype.send_authenticate = function(username, password, consumerKey, consumerSecret) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticate_args();
  args.username = username;
  args.password = password;
  args.consumerKey = consumerKey;
  args.consumerSecret = consumerSecret;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_authenticate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_authenticate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticate failed: unknown result');
};
UserStoreClient.prototype.authenticateLongSession = function(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription);
};

UserStoreClient.prototype.send_authenticateLongSession = function(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateLongSession', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticateLongSession_args();
  args.username = username;
  args.password = password;
  args.consumerKey = consumerKey;
  args.consumerSecret = consumerSecret;
  args.deviceIdentifier = deviceIdentifier;
  args.deviceDescription = deviceDescription;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_authenticateLongSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_authenticateLongSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateLongSession failed: unknown result');
};
UserStoreClient.prototype.authenticateToBusiness = function(authenticationToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateToBusiness(authenticationToken);
};

UserStoreClient.prototype.send_authenticateToBusiness = function(authenticationToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateToBusiness', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticateToBusiness_args();
  args.authenticationToken = authenticationToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_authenticateToBusiness = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_authenticateToBusiness_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateToBusiness failed: unknown result');
};
UserStoreClient.prototype.refreshAuthentication = function(authenticationToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_refreshAuthentication(authenticationToken);
};

UserStoreClient.prototype.send_refreshAuthentication = function(authenticationToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('refreshAuthentication', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_refreshAuthentication_args();
  args.authenticationToken = authenticationToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_refreshAuthentication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_refreshAuthentication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('refreshAuthentication failed: unknown result');
};
UserStoreClient.prototype.getUser = function(authenticationToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUser(authenticationToken);
};

UserStoreClient.prototype.send_getUser = function(authenticationToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getUser_args();
  args.authenticationToken = authenticationToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_getUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_getUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUser failed: unknown result');
};
UserStoreClient.prototype.getPublicUserInfo = function(username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPublicUserInfo(username);
};

UserStoreClient.prototype.send_getPublicUserInfo = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPublicUserInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getPublicUserInfo_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_getPublicUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_getPublicUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPublicUserInfo failed: unknown result');
};
UserStoreClient.prototype.getPremiumInfo = function(authenticationToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPremiumInfo(authenticationToken);
};

UserStoreClient.prototype.send_getPremiumInfo = function(authenticationToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPremiumInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getPremiumInfo_args();
  args.authenticationToken = authenticationToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_getPremiumInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_getPremiumInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPremiumInfo failed: unknown result');
};
UserStoreClient.prototype.getNoteStoreUrl = function(authenticationToken, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getNoteStoreUrl(authenticationToken);
};

UserStoreClient.prototype.send_getNoteStoreUrl = function(authenticationToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNoteStoreUrl', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getNoteStoreUrl_args();
  args.authenticationToken = authenticationToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserStoreClient.prototype.recv_getNoteStoreUrl = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserStore_getNoteStoreUrl_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteStoreUrl failed: unknown result');
};
UserStoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
UserStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

UserStoreProcessor.prototype.process_checkVersion = function(seqid, input, output) {
  var args = new UserStore_checkVersion_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.checkVersion(args.clientName, args.edamVersionMajor, args.edamVersionMinor, function (err, result) {
    var result = new UserStore_checkVersion_result((err != null ? err : {success: result}));
    output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_getBootstrapInfo = function(seqid, input, output) {
  var args = new UserStore_getBootstrapInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getBootstrapInfo(args.locale, function (err, result) {
    var result = new UserStore_getBootstrapInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getBootstrapInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_authenticate = function(seqid, input, output) {
  var args = new UserStore_authenticate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticate(args.username, args.password, args.consumerKey, args.consumerSecret, function (err, result) {
    var result = new UserStore_authenticate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_authenticateLongSession = function(seqid, input, output) {
  var args = new UserStore_authenticateLongSession_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticateLongSession(args.username, args.password, args.consumerKey, args.consumerSecret, args.deviceIdentifier, args.deviceDescription, function (err, result) {
    var result = new UserStore_authenticateLongSession_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticateLongSession", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_authenticateToBusiness = function(seqid, input, output) {
  var args = new UserStore_authenticateToBusiness_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticateToBusiness(args.authenticationToken, function (err, result) {
    var result = new UserStore_authenticateToBusiness_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticateToBusiness", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_refreshAuthentication = function(seqid, input, output) {
  var args = new UserStore_refreshAuthentication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.refreshAuthentication(args.authenticationToken, function (err, result) {
    var result = new UserStore_refreshAuthentication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("refreshAuthentication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_getUser = function(seqid, input, output) {
  var args = new UserStore_getUser_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getUser(args.authenticationToken, function (err, result) {
    var result = new UserStore_getUser_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_getPublicUserInfo = function(seqid, input, output) {
  var args = new UserStore_getPublicUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPublicUserInfo(args.username, function (err, result) {
    var result = new UserStore_getPublicUserInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPublicUserInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_getPremiumInfo = function(seqid, input, output) {
  var args = new UserStore_getPremiumInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPremiumInfo(args.authenticationToken, function (err, result) {
    var result = new UserStore_getPremiumInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPremiumInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserStoreProcessor.prototype.process_getNoteStoreUrl = function(seqid, input, output) {
  var args = new UserStore_getNoteStoreUrl_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getNoteStoreUrl(args.authenticationToken, function (err, result) {
    var result = new UserStore_getNoteStoreUrl_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getNoteStoreUrl", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

