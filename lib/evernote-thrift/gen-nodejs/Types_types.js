//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.PrivilegeLevel = {
'NORMAL' : 1,
'PREMIUM' : 3,
'MANAGER' : 7,
'SUPPORT' : 8,
'ADMIN' : 9
};
ttypes.QueryFormat = {
'USER' : 1,
'SEXP' : 2
};
ttypes.NoteSortOrder = {
'CREATED' : 1,
'UPDATED' : 2,
'RELEVANCE' : 3,
'UPDATE_SEQUENCE_NUMBER' : 4,
'TITLE' : 5
};
ttypes.PremiumOrderStatus = {
'NONE' : 0,
'PENDING' : 1,
'ACTIVE' : 2,
'FAILED' : 3,
'CANCELLATION_PENDING' : 4,
'CANCELED' : 5
};
ttypes.SharedNotebookPrivilegeLevel = {
'READ_NOTEBOOK' : 0,
'MODIFY_NOTEBOOK_PLUS_ACTIVITY' : 1,
'READ_NOTEBOOK_PLUS_ACTIVITY' : 2,
'GROUP' : 3,
'FULL_ACCESS' : 4,
'BUSINESS_FULL_ACCESS' : 5
};
ttypes.SponsoredGroupRole = {
'GROUP_MEMBER' : 1,
'GROUP_ADMIN' : 2,
'GROUP_OWNER' : 3
};
ttypes.BusinessUserRole = {
'ADMIN' : 1,
'NORMAL' : 2
};
ttypes.SharedNotebookInstanceRestrictions = {
'ONLY_JOINED_OR_PREVIEW' : 1,
'NO_SHARED_NOTEBOOKS' : 2
};
Data = module.exports.Data = function(args) {
  this.bodyHash = null;
  this.size = null;
  this.body = null;
  if (args) {
    if (args.bodyHash !== undefined) {
      this.bodyHash = args.bodyHash;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.body !== undefined) {
      this.body = args.body;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.bodyHash !== null && this.bodyHash !== undefined) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1);
    output.writeString(this.bodyHash);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAttributes = module.exports.UserAttributes = function(args) {
  this.defaultLocationName = null;
  this.defaultLatitude = null;
  this.defaultLongitude = null;
  this.preactivation = null;
  this.viewedPromotions = null;
  this.incomingEmailAddress = null;
  this.recentMailedAddresses = null;
  this.comments = null;
  this.dateAgreedToTermsOfService = null;
  this.maxReferrals = null;
  this.referralCount = null;
  this.refererCode = null;
  this.sentEmailDate = null;
  this.sentEmailCount = null;
  this.dailyEmailLimit = null;
  this.emailOptOutDate = null;
  this.partnerEmailOptInDate = null;
  this.preferredLanguage = null;
  this.preferredCountry = null;
  this.clipFullPage = null;
  this.twitterUserName = null;
  this.twitterId = null;
  this.groupName = null;
  this.recognitionLanguage = null;
  this.customerProfileId = null;
  this.referralProof = null;
  this.educationalDiscount = null;
  this.businessAddress = null;
  this.hideSponsorBilling = null;
  this.taxExempt = null;
  if (args) {
    if (args.defaultLocationName !== undefined) {
      this.defaultLocationName = args.defaultLocationName;
    }
    if (args.defaultLatitude !== undefined) {
      this.defaultLatitude = args.defaultLatitude;
    }
    if (args.defaultLongitude !== undefined) {
      this.defaultLongitude = args.defaultLongitude;
    }
    if (args.preactivation !== undefined) {
      this.preactivation = args.preactivation;
    }
    if (args.viewedPromotions !== undefined) {
      this.viewedPromotions = args.viewedPromotions;
    }
    if (args.incomingEmailAddress !== undefined) {
      this.incomingEmailAddress = args.incomingEmailAddress;
    }
    if (args.recentMailedAddresses !== undefined) {
      this.recentMailedAddresses = args.recentMailedAddresses;
    }
    if (args.comments !== undefined) {
      this.comments = args.comments;
    }
    if (args.dateAgreedToTermsOfService !== undefined) {
      this.dateAgreedToTermsOfService = args.dateAgreedToTermsOfService;
    }
    if (args.maxReferrals !== undefined) {
      this.maxReferrals = args.maxReferrals;
    }
    if (args.referralCount !== undefined) {
      this.referralCount = args.referralCount;
    }
    if (args.refererCode !== undefined) {
      this.refererCode = args.refererCode;
    }
    if (args.sentEmailDate !== undefined) {
      this.sentEmailDate = args.sentEmailDate;
    }
    if (args.sentEmailCount !== undefined) {
      this.sentEmailCount = args.sentEmailCount;
    }
    if (args.dailyEmailLimit !== undefined) {
      this.dailyEmailLimit = args.dailyEmailLimit;
    }
    if (args.emailOptOutDate !== undefined) {
      this.emailOptOutDate = args.emailOptOutDate;
    }
    if (args.partnerEmailOptInDate !== undefined) {
      this.partnerEmailOptInDate = args.partnerEmailOptInDate;
    }
    if (args.preferredLanguage !== undefined) {
      this.preferredLanguage = args.preferredLanguage;
    }
    if (args.preferredCountry !== undefined) {
      this.preferredCountry = args.preferredCountry;
    }
    if (args.clipFullPage !== undefined) {
      this.clipFullPage = args.clipFullPage;
    }
    if (args.twitterUserName !== undefined) {
      this.twitterUserName = args.twitterUserName;
    }
    if (args.twitterId !== undefined) {
      this.twitterId = args.twitterId;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
    if (args.recognitionLanguage !== undefined) {
      this.recognitionLanguage = args.recognitionLanguage;
    }
    if (args.customerProfileId !== undefined) {
      this.customerProfileId = args.customerProfileId;
    }
    if (args.referralProof !== undefined) {
      this.referralProof = args.referralProof;
    }
    if (args.educationalDiscount !== undefined) {
      this.educationalDiscount = args.educationalDiscount;
    }
    if (args.businessAddress !== undefined) {
      this.businessAddress = args.businessAddress;
    }
    if (args.hideSponsorBilling !== undefined) {
      this.hideSponsorBilling = args.hideSponsorBilling;
    }
    if (args.taxExempt !== undefined) {
      this.taxExempt = args.taxExempt;
    }
  }
};
UserAttributes.prototype = {};
UserAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.defaultLocationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLatitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLongitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preactivation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.viewedPromotions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.viewedPromotions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.incomingEmailAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.recentMailedAddresses = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.recentMailedAddresses.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dateAgreedToTermsOfService = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.maxReferrals = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.referralCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.refererCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.sentEmailDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.sentEmailCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.dailyEmailLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.emailOptOutDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.partnerEmailOptInDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.preferredLanguage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.preferredCountry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.clipFullPage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.twitterUserName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.twitterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.recognitionLanguage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.customerProfileId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.referralProof = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.educationalDiscount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.businessAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.hideSponsorBilling = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.taxExempt = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAttributes.prototype.write = function(output) {
  output.writeStructBegin('UserAttributes');
  if (this.defaultLocationName !== null && this.defaultLocationName !== undefined) {
    output.writeFieldBegin('defaultLocationName', Thrift.Type.STRING, 1);
    output.writeString(this.defaultLocationName);
    output.writeFieldEnd();
  }
  if (this.defaultLatitude !== null && this.defaultLatitude !== undefined) {
    output.writeFieldBegin('defaultLatitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.defaultLatitude);
    output.writeFieldEnd();
  }
  if (this.defaultLongitude !== null && this.defaultLongitude !== undefined) {
    output.writeFieldBegin('defaultLongitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.defaultLongitude);
    output.writeFieldEnd();
  }
  if (this.preactivation !== null && this.preactivation !== undefined) {
    output.writeFieldBegin('preactivation', Thrift.Type.BOOL, 4);
    output.writeBool(this.preactivation);
    output.writeFieldEnd();
  }
  if (this.viewedPromotions !== null && this.viewedPromotions !== undefined) {
    output.writeFieldBegin('viewedPromotions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.viewedPromotions.length);
    for (var iter14 in this.viewedPromotions)
    {
      if (this.viewedPromotions.hasOwnProperty(iter14))
      {
        iter14 = this.viewedPromotions[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.incomingEmailAddress !== null && this.incomingEmailAddress !== undefined) {
    output.writeFieldBegin('incomingEmailAddress', Thrift.Type.STRING, 6);
    output.writeString(this.incomingEmailAddress);
    output.writeFieldEnd();
  }
  if (this.recentMailedAddresses !== null && this.recentMailedAddresses !== undefined) {
    output.writeFieldBegin('recentMailedAddresses', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.recentMailedAddresses.length);
    for (var iter15 in this.recentMailedAddresses)
    {
      if (this.recentMailedAddresses.hasOwnProperty(iter15))
      {
        iter15 = this.recentMailedAddresses[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 9);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  if (this.dateAgreedToTermsOfService !== null && this.dateAgreedToTermsOfService !== undefined) {
    output.writeFieldBegin('dateAgreedToTermsOfService', Thrift.Type.I64, 11);
    output.writeI64(this.dateAgreedToTermsOfService);
    output.writeFieldEnd();
  }
  if (this.maxReferrals !== null && this.maxReferrals !== undefined) {
    output.writeFieldBegin('maxReferrals', Thrift.Type.I32, 12);
    output.writeI32(this.maxReferrals);
    output.writeFieldEnd();
  }
  if (this.referralCount !== null && this.referralCount !== undefined) {
    output.writeFieldBegin('referralCount', Thrift.Type.I32, 13);
    output.writeI32(this.referralCount);
    output.writeFieldEnd();
  }
  if (this.refererCode !== null && this.refererCode !== undefined) {
    output.writeFieldBegin('refererCode', Thrift.Type.STRING, 14);
    output.writeString(this.refererCode);
    output.writeFieldEnd();
  }
  if (this.sentEmailDate !== null && this.sentEmailDate !== undefined) {
    output.writeFieldBegin('sentEmailDate', Thrift.Type.I64, 15);
    output.writeI64(this.sentEmailDate);
    output.writeFieldEnd();
  }
  if (this.sentEmailCount !== null && this.sentEmailCount !== undefined) {
    output.writeFieldBegin('sentEmailCount', Thrift.Type.I32, 16);
    output.writeI32(this.sentEmailCount);
    output.writeFieldEnd();
  }
  if (this.dailyEmailLimit !== null && this.dailyEmailLimit !== undefined) {
    output.writeFieldBegin('dailyEmailLimit', Thrift.Type.I32, 17);
    output.writeI32(this.dailyEmailLimit);
    output.writeFieldEnd();
  }
  if (this.emailOptOutDate !== null && this.emailOptOutDate !== undefined) {
    output.writeFieldBegin('emailOptOutDate', Thrift.Type.I64, 18);
    output.writeI64(this.emailOptOutDate);
    output.writeFieldEnd();
  }
  if (this.partnerEmailOptInDate !== null && this.partnerEmailOptInDate !== undefined) {
    output.writeFieldBegin('partnerEmailOptInDate', Thrift.Type.I64, 19);
    output.writeI64(this.partnerEmailOptInDate);
    output.writeFieldEnd();
  }
  if (this.preferredLanguage !== null && this.preferredLanguage !== undefined) {
    output.writeFieldBegin('preferredLanguage', Thrift.Type.STRING, 20);
    output.writeString(this.preferredLanguage);
    output.writeFieldEnd();
  }
  if (this.preferredCountry !== null && this.preferredCountry !== undefined) {
    output.writeFieldBegin('preferredCountry', Thrift.Type.STRING, 21);
    output.writeString(this.preferredCountry);
    output.writeFieldEnd();
  }
  if (this.clipFullPage !== null && this.clipFullPage !== undefined) {
    output.writeFieldBegin('clipFullPage', Thrift.Type.BOOL, 22);
    output.writeBool(this.clipFullPage);
    output.writeFieldEnd();
  }
  if (this.twitterUserName !== null && this.twitterUserName !== undefined) {
    output.writeFieldBegin('twitterUserName', Thrift.Type.STRING, 23);
    output.writeString(this.twitterUserName);
    output.writeFieldEnd();
  }
  if (this.twitterId !== null && this.twitterId !== undefined) {
    output.writeFieldBegin('twitterId', Thrift.Type.STRING, 24);
    output.writeString(this.twitterId);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 25);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.recognitionLanguage !== null && this.recognitionLanguage !== undefined) {
    output.writeFieldBegin('recognitionLanguage', Thrift.Type.STRING, 26);
    output.writeString(this.recognitionLanguage);
    output.writeFieldEnd();
  }
  if (this.customerProfileId !== null && this.customerProfileId !== undefined) {
    output.writeFieldBegin('customerProfileId', Thrift.Type.I64, 27);
    output.writeI64(this.customerProfileId);
    output.writeFieldEnd();
  }
  if (this.referralProof !== null && this.referralProof !== undefined) {
    output.writeFieldBegin('referralProof', Thrift.Type.STRING, 28);
    output.writeString(this.referralProof);
    output.writeFieldEnd();
  }
  if (this.educationalDiscount !== null && this.educationalDiscount !== undefined) {
    output.writeFieldBegin('educationalDiscount', Thrift.Type.BOOL, 29);
    output.writeBool(this.educationalDiscount);
    output.writeFieldEnd();
  }
  if (this.businessAddress !== null && this.businessAddress !== undefined) {
    output.writeFieldBegin('businessAddress', Thrift.Type.STRING, 30);
    output.writeString(this.businessAddress);
    output.writeFieldEnd();
  }
  if (this.hideSponsorBilling !== null && this.hideSponsorBilling !== undefined) {
    output.writeFieldBegin('hideSponsorBilling', Thrift.Type.BOOL, 31);
    output.writeBool(this.hideSponsorBilling);
    output.writeFieldEnd();
  }
  if (this.taxExempt !== null && this.taxExempt !== undefined) {
    output.writeFieldBegin('taxExempt', Thrift.Type.BOOL, 32);
    output.writeBool(this.taxExempt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Accounting = module.exports.Accounting = function(args) {
  this.uploadLimit = null;
  this.uploadLimitEnd = null;
  this.uploadLimitNextMonth = null;
  this.premiumServiceStatus = null;
  this.premiumOrderNumber = null;
  this.premiumCommerceService = null;
  this.premiumServiceStart = null;
  this.premiumServiceSKU = null;
  this.lastSuccessfulCharge = null;
  this.lastFailedCharge = null;
  this.lastFailedChargeReason = null;
  this.nextPaymentDue = null;
  this.premiumLockUntil = null;
  this.updated = null;
  this.premiumSubscriptionNumber = null;
  this.lastRequestedCharge = null;
  this.currency = null;
  this.unitPrice = null;
  this.businessId = null;
  this.businessName = null;
  this.businessRole = null;
  if (args) {
    if (args.uploadLimit !== undefined) {
      this.uploadLimit = args.uploadLimit;
    }
    if (args.uploadLimitEnd !== undefined) {
      this.uploadLimitEnd = args.uploadLimitEnd;
    }
    if (args.uploadLimitNextMonth !== undefined) {
      this.uploadLimitNextMonth = args.uploadLimitNextMonth;
    }
    if (args.premiumServiceStatus !== undefined) {
      this.premiumServiceStatus = args.premiumServiceStatus;
    }
    if (args.premiumOrderNumber !== undefined) {
      this.premiumOrderNumber = args.premiumOrderNumber;
    }
    if (args.premiumCommerceService !== undefined) {
      this.premiumCommerceService = args.premiumCommerceService;
    }
    if (args.premiumServiceStart !== undefined) {
      this.premiumServiceStart = args.premiumServiceStart;
    }
    if (args.premiumServiceSKU !== undefined) {
      this.premiumServiceSKU = args.premiumServiceSKU;
    }
    if (args.lastSuccessfulCharge !== undefined) {
      this.lastSuccessfulCharge = args.lastSuccessfulCharge;
    }
    if (args.lastFailedCharge !== undefined) {
      this.lastFailedCharge = args.lastFailedCharge;
    }
    if (args.lastFailedChargeReason !== undefined) {
      this.lastFailedChargeReason = args.lastFailedChargeReason;
    }
    if (args.nextPaymentDue !== undefined) {
      this.nextPaymentDue = args.nextPaymentDue;
    }
    if (args.premiumLockUntil !== undefined) {
      this.premiumLockUntil = args.premiumLockUntil;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.premiumSubscriptionNumber !== undefined) {
      this.premiumSubscriptionNumber = args.premiumSubscriptionNumber;
    }
    if (args.lastRequestedCharge !== undefined) {
      this.lastRequestedCharge = args.lastRequestedCharge;
    }
    if (args.currency !== undefined) {
      this.currency = args.currency;
    }
    if (args.unitPrice !== undefined) {
      this.unitPrice = args.unitPrice;
    }
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
    if (args.businessName !== undefined) {
      this.businessName = args.businessName;
    }
    if (args.businessRole !== undefined) {
      this.businessRole = args.businessRole;
    }
  }
};
Accounting.prototype = {};
Accounting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitEnd = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitNextMonth = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.premiumServiceStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.premiumOrderNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.premiumCommerceService = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.premiumServiceStart = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.premiumServiceSKU = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.lastSuccessfulCharge = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.lastFailedCharge = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.lastFailedChargeReason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.nextPaymentDue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.premiumLockUntil = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.premiumSubscriptionNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.lastRequestedCharge = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.unitPrice = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.businessName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.businessRole = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Accounting.prototype.write = function(output) {
  output.writeStructBegin('Accounting');
  if (this.uploadLimit !== null && this.uploadLimit !== undefined) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 1);
    output.writeI64(this.uploadLimit);
    output.writeFieldEnd();
  }
  if (this.uploadLimitEnd !== null && this.uploadLimitEnd !== undefined) {
    output.writeFieldBegin('uploadLimitEnd', Thrift.Type.I64, 2);
    output.writeI64(this.uploadLimitEnd);
    output.writeFieldEnd();
  }
  if (this.uploadLimitNextMonth !== null && this.uploadLimitNextMonth !== undefined) {
    output.writeFieldBegin('uploadLimitNextMonth', Thrift.Type.I64, 3);
    output.writeI64(this.uploadLimitNextMonth);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStatus !== null && this.premiumServiceStatus !== undefined) {
    output.writeFieldBegin('premiumServiceStatus', Thrift.Type.I32, 4);
    output.writeI32(this.premiumServiceStatus);
    output.writeFieldEnd();
  }
  if (this.premiumOrderNumber !== null && this.premiumOrderNumber !== undefined) {
    output.writeFieldBegin('premiumOrderNumber', Thrift.Type.STRING, 5);
    output.writeString(this.premiumOrderNumber);
    output.writeFieldEnd();
  }
  if (this.premiumCommerceService !== null && this.premiumCommerceService !== undefined) {
    output.writeFieldBegin('premiumCommerceService', Thrift.Type.STRING, 6);
    output.writeString(this.premiumCommerceService);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStart !== null && this.premiumServiceStart !== undefined) {
    output.writeFieldBegin('premiumServiceStart', Thrift.Type.I64, 7);
    output.writeI64(this.premiumServiceStart);
    output.writeFieldEnd();
  }
  if (this.premiumServiceSKU !== null && this.premiumServiceSKU !== undefined) {
    output.writeFieldBegin('premiumServiceSKU', Thrift.Type.STRING, 8);
    output.writeString(this.premiumServiceSKU);
    output.writeFieldEnd();
  }
  if (this.lastSuccessfulCharge !== null && this.lastSuccessfulCharge !== undefined) {
    output.writeFieldBegin('lastSuccessfulCharge', Thrift.Type.I64, 9);
    output.writeI64(this.lastSuccessfulCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedCharge !== null && this.lastFailedCharge !== undefined) {
    output.writeFieldBegin('lastFailedCharge', Thrift.Type.I64, 10);
    output.writeI64(this.lastFailedCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedChargeReason !== null && this.lastFailedChargeReason !== undefined) {
    output.writeFieldBegin('lastFailedChargeReason', Thrift.Type.STRING, 11);
    output.writeString(this.lastFailedChargeReason);
    output.writeFieldEnd();
  }
  if (this.nextPaymentDue !== null && this.nextPaymentDue !== undefined) {
    output.writeFieldBegin('nextPaymentDue', Thrift.Type.I64, 12);
    output.writeI64(this.nextPaymentDue);
    output.writeFieldEnd();
  }
  if (this.premiumLockUntil !== null && this.premiumLockUntil !== undefined) {
    output.writeFieldBegin('premiumLockUntil', Thrift.Type.I64, 13);
    output.writeI64(this.premiumLockUntil);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 14);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.premiumSubscriptionNumber !== null && this.premiumSubscriptionNumber !== undefined) {
    output.writeFieldBegin('premiumSubscriptionNumber', Thrift.Type.STRING, 16);
    output.writeString(this.premiumSubscriptionNumber);
    output.writeFieldEnd();
  }
  if (this.lastRequestedCharge !== null && this.lastRequestedCharge !== undefined) {
    output.writeFieldBegin('lastRequestedCharge', Thrift.Type.I64, 17);
    output.writeI64(this.lastRequestedCharge);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 18);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.unitPrice !== null && this.unitPrice !== undefined) {
    output.writeFieldBegin('unitPrice', Thrift.Type.I32, 19);
    output.writeI32(this.unitPrice);
    output.writeFieldEnd();
  }
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 20);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  if (this.businessName !== null && this.businessName !== undefined) {
    output.writeFieldBegin('businessName', Thrift.Type.STRING, 21);
    output.writeString(this.businessName);
    output.writeFieldEnd();
  }
  if (this.businessRole !== null && this.businessRole !== undefined) {
    output.writeFieldBegin('businessRole', Thrift.Type.I32, 22);
    output.writeI32(this.businessRole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PremiumInfo = module.exports.PremiumInfo = function(args) {
  this.currentTime = null;
  this.premium = null;
  this.premiumRecurring = null;
  this.premiumExpirationDate = null;
  this.premiumExtendable = null;
  this.premiumPending = null;
  this.premiumCancellationPending = null;
  this.canPurchaseUploadAllowance = null;
  this.sponsoredGroupName = null;
  this.sponsoredGroupRole = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.premium !== undefined) {
      this.premium = args.premium;
    }
    if (args.premiumRecurring !== undefined) {
      this.premiumRecurring = args.premiumRecurring;
    }
    if (args.premiumExpirationDate !== undefined) {
      this.premiumExpirationDate = args.premiumExpirationDate;
    }
    if (args.premiumExtendable !== undefined) {
      this.premiumExtendable = args.premiumExtendable;
    }
    if (args.premiumPending !== undefined) {
      this.premiumPending = args.premiumPending;
    }
    if (args.premiumCancellationPending !== undefined) {
      this.premiumCancellationPending = args.premiumCancellationPending;
    }
    if (args.canPurchaseUploadAllowance !== undefined) {
      this.canPurchaseUploadAllowance = args.canPurchaseUploadAllowance;
    }
    if (args.sponsoredGroupName !== undefined) {
      this.sponsoredGroupName = args.sponsoredGroupName;
    }
    if (args.sponsoredGroupRole !== undefined) {
      this.sponsoredGroupRole = args.sponsoredGroupRole;
    }
  }
};
PremiumInfo.prototype = {};
PremiumInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.premium = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumRecurring = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.premiumExpirationDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumExtendable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumPending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumCancellationPending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.canPurchaseUploadAllowance = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sponsoredGroupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.sponsoredGroupRole = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PremiumInfo.prototype.write = function(output) {
  output.writeStructBegin('PremiumInfo');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.premium !== null && this.premium !== undefined) {
    output.writeFieldBegin('premium', Thrift.Type.BOOL, 2);
    output.writeBool(this.premium);
    output.writeFieldEnd();
  }
  if (this.premiumRecurring !== null && this.premiumRecurring !== undefined) {
    output.writeFieldBegin('premiumRecurring', Thrift.Type.BOOL, 3);
    output.writeBool(this.premiumRecurring);
    output.writeFieldEnd();
  }
  if (this.premiumExpirationDate !== null && this.premiumExpirationDate !== undefined) {
    output.writeFieldBegin('premiumExpirationDate', Thrift.Type.I64, 4);
    output.writeI64(this.premiumExpirationDate);
    output.writeFieldEnd();
  }
  if (this.premiumExtendable !== null && this.premiumExtendable !== undefined) {
    output.writeFieldBegin('premiumExtendable', Thrift.Type.BOOL, 5);
    output.writeBool(this.premiumExtendable);
    output.writeFieldEnd();
  }
  if (this.premiumPending !== null && this.premiumPending !== undefined) {
    output.writeFieldBegin('premiumPending', Thrift.Type.BOOL, 6);
    output.writeBool(this.premiumPending);
    output.writeFieldEnd();
  }
  if (this.premiumCancellationPending !== null && this.premiumCancellationPending !== undefined) {
    output.writeFieldBegin('premiumCancellationPending', Thrift.Type.BOOL, 7);
    output.writeBool(this.premiumCancellationPending);
    output.writeFieldEnd();
  }
  if (this.canPurchaseUploadAllowance !== null && this.canPurchaseUploadAllowance !== undefined) {
    output.writeFieldBegin('canPurchaseUploadAllowance', Thrift.Type.BOOL, 8);
    output.writeBool(this.canPurchaseUploadAllowance);
    output.writeFieldEnd();
  }
  if (this.sponsoredGroupName !== null && this.sponsoredGroupName !== undefined) {
    output.writeFieldBegin('sponsoredGroupName', Thrift.Type.STRING, 9);
    output.writeString(this.sponsoredGroupName);
    output.writeFieldEnd();
  }
  if (this.sponsoredGroupRole !== null && this.sponsoredGroupRole !== undefined) {
    output.writeFieldBegin('sponsoredGroupRole', Thrift.Type.I32, 10);
    output.writeI32(this.sponsoredGroupRole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = module.exports.User = function(args) {
  this.id = null;
  this.username = null;
  this.email = null;
  this.name = null;
  this.timezone = null;
  this.privilege = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.shardId = null;
  this.attributes = null;
  this.accounting = null;
  this.premiumInfo = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.timezone !== undefined) {
      this.timezone = args.timezone;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.accounting !== undefined) {
      this.accounting = args.accounting;
    }
    if (args.premiumInfo !== undefined) {
      this.premiumInfo = args.premiumInfo;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.UserAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.accounting = new ttypes.Accounting();
        this.accounting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.premiumInfo = new ttypes.PremiumInfo();
        this.premiumInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 7);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 9);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 10);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 13);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 14);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.accounting !== null && this.accounting !== undefined) {
    output.writeFieldBegin('accounting', Thrift.Type.STRUCT, 16);
    this.accounting.write(output);
    output.writeFieldEnd();
  }
  if (this.premiumInfo !== null && this.premiumInfo !== undefined) {
    output.writeFieldBegin('premiumInfo', Thrift.Type.STRUCT, 17);
    this.premiumInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = module.exports.Tag = function(args) {
  this.guid = null;
  this.name = null;
  this.parentGuid = null;
  this.updateSequenceNum = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.parentGuid !== undefined) {
      this.parentGuid = args.parentGuid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parentGuid !== null && this.parentGuid !== undefined) {
    output.writeFieldBegin('parentGuid', Thrift.Type.STRING, 3);
    output.writeString(this.parentGuid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 4);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LazyMap = module.exports.LazyMap = function(args) {
  this.keysOnly = null;
  this.fullMap = null;
  if (args) {
    if (args.keysOnly !== undefined) {
      this.keysOnly = args.keysOnly;
    }
    if (args.fullMap !== undefined) {
      this.fullMap = args.fullMap;
    }
  }
};
LazyMap.prototype = {};
LazyMap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.keysOnly = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.keysOnly.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.fullMap = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var key29 = null;
          var val30 = null;
          key29 = input.readString();
          val30 = input.readString();
          this.fullMap[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LazyMap.prototype.write = function(output) {
  output.writeStructBegin('LazyMap');
  if (this.keysOnly !== null && this.keysOnly !== undefined) {
    output.writeFieldBegin('keysOnly', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.keysOnly.length);
    for (var iter31 in this.keysOnly)
    {
      if (this.keysOnly.hasOwnProperty(iter31))
      {
        iter31 = this.keysOnly[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.fullMap !== null && this.fullMap !== undefined) {
    output.writeFieldBegin('fullMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fullMap));
    for (var kiter32 in this.fullMap)
    {
      if (this.fullMap.hasOwnProperty(kiter32))
      {
        var viter33 = this.fullMap[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceAttributes = module.exports.ResourceAttributes = function(args) {
  this.sourceURL = null;
  this.timestamp = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.cameraMake = null;
  this.cameraModel = null;
  this.clientWillIndex = null;
  this.recoType = null;
  this.fileName = null;
  this.attachment = null;
  this.applicationData = null;
  if (args) {
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.cameraMake !== undefined) {
      this.cameraMake = args.cameraMake;
    }
    if (args.cameraModel !== undefined) {
      this.cameraModel = args.cameraModel;
    }
    if (args.clientWillIndex !== undefined) {
      this.clientWillIndex = args.clientWillIndex;
    }
    if (args.recoType !== undefined) {
      this.recoType = args.recoType;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.attachment !== undefined) {
      this.attachment = args.attachment;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
  }
};
ResourceAttributes.prototype = {};
ResourceAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cameraMake = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cameraModel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.clientWillIndex = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.recoType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.attachment = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new ttypes.LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceAttributes.prototype.write = function(output) {
  output.writeStructBegin('ResourceAttributes');
  if (this.sourceURL !== null && this.sourceURL !== undefined) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 1);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.cameraMake !== null && this.cameraMake !== undefined) {
    output.writeFieldBegin('cameraMake', Thrift.Type.STRING, 6);
    output.writeString(this.cameraMake);
    output.writeFieldEnd();
  }
  if (this.cameraModel !== null && this.cameraModel !== undefined) {
    output.writeFieldBegin('cameraModel', Thrift.Type.STRING, 7);
    output.writeString(this.cameraModel);
    output.writeFieldEnd();
  }
  if (this.clientWillIndex !== null && this.clientWillIndex !== undefined) {
    output.writeFieldBegin('clientWillIndex', Thrift.Type.BOOL, 8);
    output.writeBool(this.clientWillIndex);
    output.writeFieldEnd();
  }
  if (this.recoType !== null && this.recoType !== undefined) {
    output.writeFieldBegin('recoType', Thrift.Type.STRING, 9);
    output.writeString(this.recoType);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 10);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.attachment !== null && this.attachment !== undefined) {
    output.writeFieldBegin('attachment', Thrift.Type.BOOL, 11);
    output.writeBool(this.attachment);
    output.writeFieldEnd();
  }
  if (this.applicationData !== null && this.applicationData !== undefined) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 12);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = module.exports.Resource = function(args) {
  this.guid = null;
  this.noteGuid = null;
  this.data = null;
  this.mime = null;
  this.width = null;
  this.height = null;
  this.duration = null;
  this.active = null;
  this.recognition = null;
  this.attributes = null;
  this.updateSequenceNum = null;
  this.alternateData = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.mime !== undefined) {
      this.mime = args.mime;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.recognition !== undefined) {
      this.recognition = args.recognition;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.alternateData !== undefined) {
      this.alternateData = args.alternateData;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Data();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.duration = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.recognition = new ttypes.Data();
        this.recognition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.ResourceAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.alternateData = new ttypes.Data();
        this.alternateData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.mime !== null && this.mime !== undefined) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 4);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I16, 5);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I16, 6);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I16, 7);
    output.writeI16(this.duration);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 8);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.recognition !== null && this.recognition !== undefined) {
    output.writeFieldBegin('recognition', Thrift.Type.STRUCT, 9);
    this.recognition.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 11);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 12);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.alternateData !== null && this.alternateData !== undefined) {
    output.writeFieldBegin('alternateData', Thrift.Type.STRUCT, 13);
    this.alternateData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteAttributes = module.exports.NoteAttributes = function(args) {
  this.subjectDate = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.author = null;
  this.source = null;
  this.sourceURL = null;
  this.sourceApplication = null;
  this.shareDate = null;
  this.placeName = null;
  this.contentClass = null;
  this.applicationData = null;
  this.lastEditedBy = null;
  this.classifications = null;
  if (args) {
    if (args.subjectDate !== undefined) {
      this.subjectDate = args.subjectDate;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.sourceApplication !== undefined) {
      this.sourceApplication = args.sourceApplication;
    }
    if (args.shareDate !== undefined) {
      this.shareDate = args.shareDate;
    }
    if (args.placeName !== undefined) {
      this.placeName = args.placeName;
    }
    if (args.contentClass !== undefined) {
      this.contentClass = args.contentClass;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
    if (args.lastEditedBy !== undefined) {
      this.lastEditedBy = args.lastEditedBy;
    }
    if (args.classifications !== undefined) {
      this.classifications = args.classifications;
    }
  }
};
NoteAttributes.prototype = {};
NoteAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subjectDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.sourceApplication = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.shareDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.placeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.contentClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new ttypes.LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.lastEditedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.classifications = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var key40 = null;
          var val41 = null;
          key40 = input.readString();
          val41 = input.readString();
          this.classifications[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteAttributes.prototype.write = function(output) {
  output.writeStructBegin('NoteAttributes');
  if (this.subjectDate !== null && this.subjectDate !== undefined) {
    output.writeFieldBegin('subjectDate', Thrift.Type.I64, 1);
    output.writeI64(this.subjectDate);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 13);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 14);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.sourceURL !== null && this.sourceURL !== undefined) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 15);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.sourceApplication !== null && this.sourceApplication !== undefined) {
    output.writeFieldBegin('sourceApplication', Thrift.Type.STRING, 16);
    output.writeString(this.sourceApplication);
    output.writeFieldEnd();
  }
  if (this.shareDate !== null && this.shareDate !== undefined) {
    output.writeFieldBegin('shareDate', Thrift.Type.I64, 17);
    output.writeI64(this.shareDate);
    output.writeFieldEnd();
  }
  if (this.placeName !== null && this.placeName !== undefined) {
    output.writeFieldBegin('placeName', Thrift.Type.STRING, 21);
    output.writeString(this.placeName);
    output.writeFieldEnd();
  }
  if (this.contentClass !== null && this.contentClass !== undefined) {
    output.writeFieldBegin('contentClass', Thrift.Type.STRING, 22);
    output.writeString(this.contentClass);
    output.writeFieldEnd();
  }
  if (this.applicationData !== null && this.applicationData !== undefined) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 23);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  if (this.lastEditedBy !== null && this.lastEditedBy !== undefined) {
    output.writeFieldBegin('lastEditedBy', Thrift.Type.STRING, 24);
    output.writeString(this.lastEditedBy);
    output.writeFieldEnd();
  }
  if (this.classifications !== null && this.classifications !== undefined) {
    output.writeFieldBegin('classifications', Thrift.Type.MAP, 26);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.classifications));
    for (var kiter42 in this.classifications)
    {
      if (this.classifications.hasOwnProperty(kiter42))
      {
        var viter43 = this.classifications[kiter42];
        output.writeString(kiter42);
        output.writeString(viter43);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Note = module.exports.Note = function(args) {
  this.guid = null;
  this.title = null;
  this.content = null;
  this.contentHash = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.resources = null;
  this.attributes = null;
  this.tagNames = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.contentHash !== undefined) {
      this.contentHash = args.contentHash;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.tagNames !== undefined) {
      this.tagNames = args.tagNames;
    }
  }
};
Note.prototype = {};
Note.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.tagGuids = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString();
          this.tagGuids.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size51 = 0;
        var _rtmp355;
        this.resources = [];
        var _etype54 = 0;
        _rtmp355 = input.readListBegin();
        _etype54 = _rtmp355.etype;
        _size51 = _rtmp355.size;
        for (var _i56 = 0; _i56 < _size51; ++_i56)
        {
          var elem57 = null;
          elem57 = new ttypes.Resource();
          elem57.read(input);
          this.resources.push(elem57);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.tagNames = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString();
          this.tagNames.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Note.prototype.write = function(output) {
  output.writeStructBegin('Note');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.contentHash !== null && this.contentHash !== undefined) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 4);
    output.writeString(this.contentHash);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 9);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter65 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter65))
      {
        iter65 = this.tagGuids[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter66 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter66))
      {
        iter66 = this.resources[iter66];
        iter66.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.tagNames !== null && this.tagNames !== undefined) {
    output.writeFieldBegin('tagNames', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.tagNames.length);
    for (var iter67 in this.tagNames)
    {
      if (this.tagNames.hasOwnProperty(iter67))
      {
        iter67 = this.tagNames[iter67];
        output.writeString(iter67);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Publishing = module.exports.Publishing = function(args) {
  this.uri = null;
  this.order = null;
  this.ascending = null;
  this.publicDescription = null;
  if (args) {
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.publicDescription !== undefined) {
      this.publicDescription = args.publicDescription;
    }
  }
};
Publishing.prototype = {};
Publishing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.publicDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Publishing.prototype.write = function(output) {
  output.writeStructBegin('Publishing');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 3);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.publicDescription !== null && this.publicDescription !== undefined) {
    output.writeFieldBegin('publicDescription', Thrift.Type.STRING, 4);
    output.writeString(this.publicDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessNotebook = module.exports.BusinessNotebook = function(args) {
  this.notebookDescription = null;
  this.privilege = null;
  this.recommended = null;
  if (args) {
    if (args.notebookDescription !== undefined) {
      this.notebookDescription = args.notebookDescription;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.recommended !== undefined) {
      this.recommended = args.recommended;
    }
  }
};
BusinessNotebook.prototype = {};
BusinessNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommended = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessNotebook.prototype.write = function(output) {
  output.writeStructBegin('BusinessNotebook');
  if (this.notebookDescription !== null && this.notebookDescription !== undefined) {
    output.writeFieldBegin('notebookDescription', Thrift.Type.STRING, 1);
    output.writeString(this.notebookDescription);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 2);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.recommended !== null && this.recommended !== undefined) {
    output.writeFieldBegin('recommended', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommended);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SavedSearch = module.exports.SavedSearch = function(args) {
  this.guid = null;
  this.name = null;
  this.query = null;
  this.format = null;
  this.updateSequenceNum = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
  }
};
SavedSearch.prototype = {};
SavedSearch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SavedSearch.prototype.write = function(output) {
  output.writeStructBegin('SavedSearch');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 4);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNotebook = module.exports.SharedNotebook = function(args) {
  this.id = null;
  this.userId = null;
  this.notebookGuid = null;
  this.email = null;
  this.notebookModifiable = null;
  this.requireLogin = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.shareKey = null;
  this.username = null;
  this.privilege = null;
  this.allowPreview = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.notebookModifiable !== undefined) {
      this.notebookModifiable = args.notebookModifiable;
    }
    if (args.requireLogin !== undefined) {
      this.requireLogin = args.requireLogin;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.shareKey !== undefined) {
      this.shareKey = args.shareKey;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.allowPreview !== undefined) {
      this.allowPreview = args.allowPreview;
    }
  }
};
SharedNotebook.prototype = {};
SharedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.notebookModifiable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.requireLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.allowPreview = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNotebook.prototype.write = function(output) {
  output.writeStructBegin('SharedNotebook');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 3);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.notebookModifiable !== null && this.notebookModifiable !== undefined) {
    output.writeFieldBegin('notebookModifiable', Thrift.Type.BOOL, 5);
    output.writeBool(this.notebookModifiable);
    output.writeFieldEnd();
  }
  if (this.requireLogin !== null && this.requireLogin !== undefined) {
    output.writeFieldBegin('requireLogin', Thrift.Type.BOOL, 6);
    output.writeBool(this.requireLogin);
    output.writeFieldEnd();
  }
  if (this.serviceCreated !== null && this.serviceCreated !== undefined) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated !== null && this.serviceUpdated !== undefined) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 10);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.shareKey !== null && this.shareKey !== undefined) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 8);
    output.writeString(this.shareKey);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 9);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 11);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.allowPreview !== null && this.allowPreview !== undefined) {
    output.writeFieldBegin('allowPreview', Thrift.Type.BOOL, 12);
    output.writeBool(this.allowPreview);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookRestrictions = module.exports.NotebookRestrictions = function(args) {
  this.noReadNotes = null;
  this.noCreateNotes = null;
  this.noUpdateNotes = null;
  this.noExpungeNotes = null;
  this.noShareNotes = null;
  this.noEmailNotes = null;
  this.noSendMessageToRecipients = null;
  this.noUpdateNotebook = null;
  this.noExpungeNotebook = null;
  this.noSetDefaultNotebook = null;
  this.noSetNotebookStack = null;
  this.noPublishToPublic = null;
  this.noPublishToBusinessLibrary = null;
  this.noCreateTags = null;
  this.noUpdateTags = null;
  this.noExpungeTags = null;
  this.noSetParentTag = null;
  this.noCreateSharedNotebooks = null;
  this.updateWhichSharedNotebookRestrictions = null;
  this.expungeWhichSharedNotebookRestrictions = null;
  if (args) {
    if (args.noReadNotes !== undefined) {
      this.noReadNotes = args.noReadNotes;
    }
    if (args.noCreateNotes !== undefined) {
      this.noCreateNotes = args.noCreateNotes;
    }
    if (args.noUpdateNotes !== undefined) {
      this.noUpdateNotes = args.noUpdateNotes;
    }
    if (args.noExpungeNotes !== undefined) {
      this.noExpungeNotes = args.noExpungeNotes;
    }
    if (args.noShareNotes !== undefined) {
      this.noShareNotes = args.noShareNotes;
    }
    if (args.noEmailNotes !== undefined) {
      this.noEmailNotes = args.noEmailNotes;
    }
    if (args.noSendMessageToRecipients !== undefined) {
      this.noSendMessageToRecipients = args.noSendMessageToRecipients;
    }
    if (args.noUpdateNotebook !== undefined) {
      this.noUpdateNotebook = args.noUpdateNotebook;
    }
    if (args.noExpungeNotebook !== undefined) {
      this.noExpungeNotebook = args.noExpungeNotebook;
    }
    if (args.noSetDefaultNotebook !== undefined) {
      this.noSetDefaultNotebook = args.noSetDefaultNotebook;
    }
    if (args.noSetNotebookStack !== undefined) {
      this.noSetNotebookStack = args.noSetNotebookStack;
    }
    if (args.noPublishToPublic !== undefined) {
      this.noPublishToPublic = args.noPublishToPublic;
    }
    if (args.noPublishToBusinessLibrary !== undefined) {
      this.noPublishToBusinessLibrary = args.noPublishToBusinessLibrary;
    }
    if (args.noCreateTags !== undefined) {
      this.noCreateTags = args.noCreateTags;
    }
    if (args.noUpdateTags !== undefined) {
      this.noUpdateTags = args.noUpdateTags;
    }
    if (args.noExpungeTags !== undefined) {
      this.noExpungeTags = args.noExpungeTags;
    }
    if (args.noSetParentTag !== undefined) {
      this.noSetParentTag = args.noSetParentTag;
    }
    if (args.noCreateSharedNotebooks !== undefined) {
      this.noCreateSharedNotebooks = args.noCreateSharedNotebooks;
    }
    if (args.updateWhichSharedNotebookRestrictions !== undefined) {
      this.updateWhichSharedNotebookRestrictions = args.updateWhichSharedNotebookRestrictions;
    }
    if (args.expungeWhichSharedNotebookRestrictions !== undefined) {
      this.expungeWhichSharedNotebookRestrictions = args.expungeWhichSharedNotebookRestrictions;
    }
  }
};
NotebookRestrictions.prototype = {};
NotebookRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noReadNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.noShareNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.noEmailNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.noSendMessageToRecipients = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateNotebook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeNotebook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetDefaultNotebook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetNotebookStack = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.noPublishToPublic = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.noPublishToBusinessLibrary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetParentTag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateSharedNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.updateWhichSharedNotebookRestrictions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.expungeWhichSharedNotebookRestrictions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookRestrictions.prototype.write = function(output) {
  output.writeStructBegin('NotebookRestrictions');
  if (this.noReadNotes !== null && this.noReadNotes !== undefined) {
    output.writeFieldBegin('noReadNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.noReadNotes);
    output.writeFieldEnd();
  }
  if (this.noCreateNotes !== null && this.noCreateNotes !== undefined) {
    output.writeFieldBegin('noCreateNotes', Thrift.Type.BOOL, 2);
    output.writeBool(this.noCreateNotes);
    output.writeFieldEnd();
  }
  if (this.noUpdateNotes !== null && this.noUpdateNotes !== undefined) {
    output.writeFieldBegin('noUpdateNotes', Thrift.Type.BOOL, 3);
    output.writeBool(this.noUpdateNotes);
    output.writeFieldEnd();
  }
  if (this.noExpungeNotes !== null && this.noExpungeNotes !== undefined) {
    output.writeFieldBegin('noExpungeNotes', Thrift.Type.BOOL, 4);
    output.writeBool(this.noExpungeNotes);
    output.writeFieldEnd();
  }
  if (this.noShareNotes !== null && this.noShareNotes !== undefined) {
    output.writeFieldBegin('noShareNotes', Thrift.Type.BOOL, 5);
    output.writeBool(this.noShareNotes);
    output.writeFieldEnd();
  }
  if (this.noEmailNotes !== null && this.noEmailNotes !== undefined) {
    output.writeFieldBegin('noEmailNotes', Thrift.Type.BOOL, 6);
    output.writeBool(this.noEmailNotes);
    output.writeFieldEnd();
  }
  if (this.noSendMessageToRecipients !== null && this.noSendMessageToRecipients !== undefined) {
    output.writeFieldBegin('noSendMessageToRecipients', Thrift.Type.BOOL, 7);
    output.writeBool(this.noSendMessageToRecipients);
    output.writeFieldEnd();
  }
  if (this.noUpdateNotebook !== null && this.noUpdateNotebook !== undefined) {
    output.writeFieldBegin('noUpdateNotebook', Thrift.Type.BOOL, 8);
    output.writeBool(this.noUpdateNotebook);
    output.writeFieldEnd();
  }
  if (this.noExpungeNotebook !== null && this.noExpungeNotebook !== undefined) {
    output.writeFieldBegin('noExpungeNotebook', Thrift.Type.BOOL, 9);
    output.writeBool(this.noExpungeNotebook);
    output.writeFieldEnd();
  }
  if (this.noSetDefaultNotebook !== null && this.noSetDefaultNotebook !== undefined) {
    output.writeFieldBegin('noSetDefaultNotebook', Thrift.Type.BOOL, 10);
    output.writeBool(this.noSetDefaultNotebook);
    output.writeFieldEnd();
  }
  if (this.noSetNotebookStack !== null && this.noSetNotebookStack !== undefined) {
    output.writeFieldBegin('noSetNotebookStack', Thrift.Type.BOOL, 11);
    output.writeBool(this.noSetNotebookStack);
    output.writeFieldEnd();
  }
  if (this.noPublishToPublic !== null && this.noPublishToPublic !== undefined) {
    output.writeFieldBegin('noPublishToPublic', Thrift.Type.BOOL, 12);
    output.writeBool(this.noPublishToPublic);
    output.writeFieldEnd();
  }
  if (this.noPublishToBusinessLibrary !== null && this.noPublishToBusinessLibrary !== undefined) {
    output.writeFieldBegin('noPublishToBusinessLibrary', Thrift.Type.BOOL, 13);
    output.writeBool(this.noPublishToBusinessLibrary);
    output.writeFieldEnd();
  }
  if (this.noCreateTags !== null && this.noCreateTags !== undefined) {
    output.writeFieldBegin('noCreateTags', Thrift.Type.BOOL, 14);
    output.writeBool(this.noCreateTags);
    output.writeFieldEnd();
  }
  if (this.noUpdateTags !== null && this.noUpdateTags !== undefined) {
    output.writeFieldBegin('noUpdateTags', Thrift.Type.BOOL, 15);
    output.writeBool(this.noUpdateTags);
    output.writeFieldEnd();
  }
  if (this.noExpungeTags !== null && this.noExpungeTags !== undefined) {
    output.writeFieldBegin('noExpungeTags', Thrift.Type.BOOL, 16);
    output.writeBool(this.noExpungeTags);
    output.writeFieldEnd();
  }
  if (this.noSetParentTag !== null && this.noSetParentTag !== undefined) {
    output.writeFieldBegin('noSetParentTag', Thrift.Type.BOOL, 17);
    output.writeBool(this.noSetParentTag);
    output.writeFieldEnd();
  }
  if (this.noCreateSharedNotebooks !== null && this.noCreateSharedNotebooks !== undefined) {
    output.writeFieldBegin('noCreateSharedNotebooks', Thrift.Type.BOOL, 18);
    output.writeBool(this.noCreateSharedNotebooks);
    output.writeFieldEnd();
  }
  if (this.updateWhichSharedNotebookRestrictions !== null && this.updateWhichSharedNotebookRestrictions !== undefined) {
    output.writeFieldBegin('updateWhichSharedNotebookRestrictions', Thrift.Type.I32, 19);
    output.writeI32(this.updateWhichSharedNotebookRestrictions);
    output.writeFieldEnd();
  }
  if (this.expungeWhichSharedNotebookRestrictions !== null && this.expungeWhichSharedNotebookRestrictions !== undefined) {
    output.writeFieldBegin('expungeWhichSharedNotebookRestrictions', Thrift.Type.I32, 20);
    output.writeI32(this.expungeWhichSharedNotebookRestrictions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notebook = module.exports.Notebook = function(args) {
  this.guid = null;
  this.name = null;
  this.updateSequenceNum = null;
  this.defaultNotebook = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.publishing = null;
  this.published = null;
  this.stack = null;
  this.sharedNotebookIds = null;
  this.sharedNotebooks = null;
  this.businessNotebook = null;
  this.contact = null;
  this.restrictions = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.defaultNotebook !== undefined) {
      this.defaultNotebook = args.defaultNotebook;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.publishing !== undefined) {
      this.publishing = args.publishing;
    }
    if (args.published !== undefined) {
      this.published = args.published;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
    if (args.sharedNotebookIds !== undefined) {
      this.sharedNotebookIds = args.sharedNotebookIds;
    }
    if (args.sharedNotebooks !== undefined) {
      this.sharedNotebooks = args.sharedNotebooks;
    }
    if (args.businessNotebook !== undefined) {
      this.businessNotebook = args.businessNotebook;
    }
    if (args.contact !== undefined) {
      this.contact = args.contact;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
  }
};
Notebook.prototype = {};
Notebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.defaultNotebook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.publishing = new ttypes.Publishing();
        this.publishing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.sharedNotebookIds = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = input.readI64();
          this.sharedNotebookIds.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size75 = 0;
        var _rtmp379;
        this.sharedNotebooks = [];
        var _etype78 = 0;
        _rtmp379 = input.readListBegin();
        _etype78 = _rtmp379.etype;
        _size75 = _rtmp379.size;
        for (var _i80 = 0; _i80 < _size75; ++_i80)
        {
          var elem81 = null;
          elem81 = new ttypes.SharedNotebook();
          elem81.read(input);
          this.sharedNotebooks.push(elem81);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.businessNotebook = new ttypes.BusinessNotebook();
        this.businessNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.User();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new ttypes.NotebookRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notebook.prototype.write = function(output) {
  output.writeStructBegin('Notebook');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.defaultNotebook !== null && this.defaultNotebook !== undefined) {
    output.writeFieldBegin('defaultNotebook', Thrift.Type.BOOL, 6);
    output.writeBool(this.defaultNotebook);
    output.writeFieldEnd();
  }
  if (this.serviceCreated !== null && this.serviceCreated !== undefined) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated !== null && this.serviceUpdated !== undefined) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 8);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.publishing !== null && this.publishing !== undefined) {
    output.writeFieldBegin('publishing', Thrift.Type.STRUCT, 10);
    this.publishing.write(output);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 11);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 12);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookIds !== null && this.sharedNotebookIds !== undefined) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length);
    for (var iter82 in this.sharedNotebookIds)
    {
      if (this.sharedNotebookIds.hasOwnProperty(iter82))
      {
        iter82 = this.sharedNotebookIds[iter82];
        output.writeI64(iter82);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharedNotebooks !== null && this.sharedNotebooks !== undefined) {
    output.writeFieldBegin('sharedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.sharedNotebooks.length);
    for (var iter83 in this.sharedNotebooks)
    {
      if (this.sharedNotebooks.hasOwnProperty(iter83))
      {
        iter83 = this.sharedNotebooks[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.businessNotebook !== null && this.businessNotebook !== undefined) {
    output.writeFieldBegin('businessNotebook', Thrift.Type.STRUCT, 15);
    this.businessNotebook.write(output);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 16);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 17);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkedNotebook = module.exports.LinkedNotebook = function(args) {
  this.shareName = null;
  this.username = null;
  this.shardId = null;
  this.shareKey = null;
  this.uri = null;
  this.guid = null;
  this.updateSequenceNum = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  this.stack = null;
  this.businessId = null;
  if (args) {
    if (args.shareName !== undefined) {
      this.shareName = args.shareName;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.shareKey !== undefined) {
      this.shareKey = args.shareKey;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
  }
};
LinkedNotebook.prototype = {};
LinkedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shareName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedNotebook.prototype.write = function(output) {
  output.writeStructBegin('LinkedNotebook');
  if (this.shareName !== null && this.shareName !== undefined) {
    output.writeFieldBegin('shareName', Thrift.Type.STRING, 2);
    output.writeString(this.shareName);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 4);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.shareKey !== null && this.shareKey !== undefined) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 5);
    output.writeString(this.shareKey);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 6);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 7);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 8);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 9);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 10);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 11);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 12);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookDescriptor = module.exports.NotebookDescriptor = function(args) {
  this.guid = null;
  this.notebookDisplayName = null;
  this.contactName = null;
  this.hasSharedNotebook = null;
  this.joinedUserCount = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.notebookDisplayName !== undefined) {
      this.notebookDisplayName = args.notebookDisplayName;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.hasSharedNotebook !== undefined) {
      this.hasSharedNotebook = args.hasSharedNotebook;
    }
    if (args.joinedUserCount !== undefined) {
      this.joinedUserCount = args.joinedUserCount;
    }
  }
};
NotebookDescriptor.prototype = {};
NotebookDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookDisplayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSharedNotebook = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.joinedUserCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookDescriptor.prototype.write = function(output) {
  output.writeStructBegin('NotebookDescriptor');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.notebookDisplayName !== null && this.notebookDisplayName !== undefined) {
    output.writeFieldBegin('notebookDisplayName', Thrift.Type.STRING, 2);
    output.writeString(this.notebookDisplayName);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 3);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.hasSharedNotebook !== null && this.hasSharedNotebook !== undefined) {
    output.writeFieldBegin('hasSharedNotebook', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasSharedNotebook);
    output.writeFieldEnd();
  }
  if (this.joinedUserCount !== null && this.joinedUserCount !== undefined) {
    output.writeFieldBegin('joinedUserCount', Thrift.Type.I32, 5);
    output.writeI32(this.joinedUserCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.CLASSIFICATION_RECIPE_USER_NON_RECIPE = '000';
ttypes.CLASSIFICATION_RECIPE_USER_RECIPE = '001';
ttypes.CLASSIFICATION_RECIPE_SERVICE_RECIPE = '002';
ttypes.EDAM_NOTE_SOURCE_WEB_CLIP = 'web.clip';
ttypes.EDAM_NOTE_SOURCE_MAIL_CLIP = 'mail.clip';
ttypes.EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = 'mail.smtp';
